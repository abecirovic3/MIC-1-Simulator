supportedInstructions=Supported Instructions
mnemonic=Mnemonic
instruction=Instruction
meaning=Meaning
binaryCode=Binary code
console=Console
code=Code
control=Control
memory=Memory
datapath=Datapath
register=Register
value=Value
clock=Clock
subClock=Sub-clock
address=Address
searchByAddress=Search memory by address
controlMemory=Control Memory
file=File
new=New
load=Load
save=Save
examples=Examples
simpleAdder=Simple adder
nthFibNum=N-th Fibonacci number
exit=Exit
execute=Execute
run=Run
nextSubClk=Next sub-clock cycle
nextClk=Next clock cycle
help=Help
about=About
newFile=New file
loadFile=Load file
saveFile=Save file
runCode=Run code
language=Language:
successful-assemble=Code assembled successfully
line-num-err-message=Error on line number 
unknown-instr-mnemonic=, unknown instruction mnemonic
missing-arg=, missing argument
unknown-label=, unknown label name
arg-out-of-bounds=, argument out of bounds
invalid-arg=, invalid argument
too-many-args=, too many arguments
no-code-err=Error blank code area
recurring-label=, recurring label name
error=Error
invalid-new-val=Invalid new value!
valid-range=valid range is
immutable-reg=register is immutable
confirmation=Confirmation
new-code-file=Are you sure you want to create a new code file
curr-progress=Current progress will be lost
instr-fetch=Fetching instruction...
instr-exec=Executing instruction
decimal=Decimal
binary=Binary
LODD=Load directly
STOD=Store directly
ADDD=Add directly
SUBD=Subtract directly
JPOS=Jump if (ac)>=0
JZER=Jump if (ac)==0
JUMP=Unconditional jump
LOCO=Load constant
LODL=Load locally
STOL=Store locally
ADDL=Add locally
SUBL=Subtract locally
JNEG=Jump if (ac)<0
JNZE=Jump if (ac)!=0
CALL=Procedure call
PSHI=Push to stack indirectly
POPI=Pop from stack indirectly
PUSH=Push to stack
POP=Pop from stack
RETN=Return from procedure
SWAP=Swap contents of ac and sp
INSP=Increment sp
DESP=decrement sp