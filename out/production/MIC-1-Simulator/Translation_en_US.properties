supportedInstructions=Supported Instructions
mnemonic=Mnemonic
instruction=Instruction
meaning=Meaning
binaryCode=Binary code
console=Console
code=Code
control=Control
memory=Memory
datapath=Datapath
register=Register
value=Value
clock=Clock
subClock=Sub-clock
address=Address
searchByAddress=Search memory by address
controlMemory=Control Memory
file=File
new=New
load=Load
save=Save
examples=Examples
simpleAdder=Simple adder
nthFibNum=N-th Fibonacci number
exit=Exit
execute=Execute
run=Run F1
nextSubClk=Next sub-clock cycle F2
nextClk=Next clock cycle F3
help=Help
about=About
newFile=New file Ctrl+N
loadFile=Load file Ctrl+L
saveFile=Save file Ctrl+S
runCode=Run code F1
language=Language:
successful-assemble=Code assembled successfully
line-num-err-message=Error on line number 
unknown-instr-mnemonic=, unknown instruction mnemonic
missing-arg=, missing argument
unknown-label=, unknown label name
arg-out-of-bounds=, argument out of bounds
invalid-arg=, invalid argument
too-many-args=, too many arguments
no-code-err=Error blank code area
recurring-label=, recurring label name
error=Error
invalid-new-val=Invalid new value!
valid-range=valid range is
immutable-reg=register is immutable
confirmation=Confirmation
new-code-file=Are you sure you want to create a new code file
curr-progress=Current progress will be lost
instr-fetch=Fetching instruction...
instr-exec=Executing instruction
decimal=Decimal
binary=Binary
LODD=Load directly
STOD=Store directly
ADDD=Add directly
SUBD=Subtract directly
JPOS=Jump if (ac)>=0
JZER=Jump if (ac)==0
JUMP=Unconditional jump
LOCO=Load constant
LODL=Load locally
STOL=Store locally
ADDL=Add locally
SUBL=Subtract locally
JNEG=Jump if (ac)<0
JNZE=Jump if (ac)!=0
CALL=Procedure call
PSHI=Push to stack indirectly
POPI=Pop from stack indirectly
PUSH=Push to stack
POP=Pop from stack
RETN=Return from procedure
SWAP=Swap contents of ac and sp
INSP=Increment sp
DESP=decrement sp
credits=Credits
icons-download=All icons are downloaded from
icon-authors=Icon authors are listed below:
run-button=- run button, next sub-clock button, next clock button:
load-file-button=- load file button:
new-file-button=- new file button:
save-button=- save button:
language-circles=- language circles
back=Back
jumpToEnd=Jump to end
endProgram=End execution F4
program-exec-stop=Program execution aborted
load-code-file=Are you sure you want to load a new code file
load-code-example=Are you sure you want to load an example
end-program-exec-warn=Are you sure you want to abort current program execution
firstNToStack=First n numbers to stack
app-description=MIC-1 Simulator is an interactive simulator for the MIC-1 cpu, described in Andrew S. Tanenbaum's textbook Structured Computer Organization. The application is primarily intended to be used by the students of the Faculty of Electrical Engineering in Sarajevo, but everyone is welcome to use it. The idea is that the user, while using the application, gains better understanding of the principles behind the MIC-1 cpu. The user is able to write code using the supported instruction set, to run the code and to see it being executed through the cpu cycles. While the instructions are being executed the user can keep track of the memory state, control memory state, cpu registers and the different cpu components.
how-to=How to
app-use=Use the application
useful-tips=Useful tips
get-involved=Get involved
key-shortcuts=Key shortcuts
report-bugs=Report bugs
help-development=Help develop
icons=Icons
icon-credits=All icons are downloaded from\n - https://www.flaticon.com/\n\nIcon authors are listed below\n\nIcon run, Icon next sub-cycle, Icon next cycle\n - https://www.flaticon.com/authors/pixel-perfect\n\nIcon load file\n - https://www.flaticon.com/authors/iconixar\n\nIcon new file\n - https://www.flaticon.com/authors/smashicons\n\nIcon end program\n - https://www.flaticon.com/authors/alfredo-hernandez\n\nFlag icons, Icon save file\n - https://www.flaticon.com/authors/freepik\n\nApplication icon\n - https://www.flaticon.com/authors/chattapat
report-bugs-text=Feel free to report bugs. To do so you can either open an issue on GitHub at https://github.com/abecirovic3/MIC-1-Simulator/issues or report the bug via email abecirovic3@etf.unsa.ba
help-development-text=Want to contribute to app development?\n\nTo make your contribution follow these steps:\n - Create a fork of the base project\n - Clone your forked project to your local environment\n - Create a new branch\n - Make your changes\n - Push the changes to your repository\n - On your GitHub repository click on 'Compare & pull request' button\n - Leave a comment and create your pull request\n\nNote, the branch naming convention is feature-[name] for new features, fix-[name] for bug fixes
shortcuts-text=Make sure to use the keyboard shortcuts.\nTo run your code press F1\nTo execute a sub-cycle press F2\nTo execute a cycle press F3\nTo end program execution press F4\nTo create a new file press Ctrl+N\nTo load a file press Ctrl+L\nTo save a file press Ctrl+S\nTo switch between tabs press Ctrl+TAB
close=Close